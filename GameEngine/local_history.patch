Index: src/HelloWorld2Dto3D.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/HelloWorld2Dto3D.java b/src/HelloWorld2Dto3D.java
--- a/src/HelloWorld2Dto3D.java	
+++ b/src/HelloWorld2Dto3D.java	(date 1700468872585)
@@ -15,7 +15,11 @@
     //The window handle
     private long window;
 
-    public void run(){
+    public static void main(String[] args) {
+        new HelloWorld().run();
+    }
+
+    public void run() {
         System.out.println("Hello LWJGL" + Version.getVersion() + "!");
 
         init();
@@ -29,7 +33,8 @@
         glfwTerminate();
         glfwSetErrprCallback(null).free();
     }
-    public void init(){
+
+    public void init() {
         //Set up an error callback. The default implementaion
         //will print the error message in System.err
         GLFWErrorCallback.createPrint(System.err).set();
@@ -45,20 +50,20 @@
         glfwWindowHint(GLFW_RESIZEABLE, GLFW_TRUE);
 
         //Create the window
-        window=glfwCreateWindow(300, 300, "Hello World",NULL,NULL);
-        if (window==NULL) {
+        window = glfwCreateWindow(300, 300, "Hello World", NULL, NULL);
+        if (window == NULL) {
             throw new RuntimeException("Failed to create the GLFW window");
         }
 
         //Setup a key callback. It will be called every time a key is pressed, repeated or released.
-        glfwSetKeyCallback(window, (window, key, scancode, action, mods)->{
-            if (key==GLFW_KEY_ESCAPE && action==GLFW_RELEASE) {
-                glfwSetWindowShouldClose(window,true);
+        glfwSetKeyCallback(window, (window, key, scancode, action, mods) -> {
+            if (key == GLFW_KEY_ESCAPE && action == GLFW_RELEASE) {
+                glfwSetWindowShouldClose(window, true);
             }
         });
 
         // Get the thread stack and push a new frame
-        try ( MemoryStack stack = stackPush() ) {
+        try (MemoryStack stack = stackPush()) {
             IntBuffer pWidth = stack.mallocInt(1); // int*
             IntBuffer pHeight = stack.mallocInt(1); // int*
 
@@ -85,7 +90,7 @@
         glfwShowWindow(window);
     }
 
-    public void loop(){
+    public void loop() {
         // This line is critical for LWJGL's interoperation with GLFW's
         // OpenGL context, or any context that is managed externally.
         // LWJGL detects the context that is current in the current thread,
@@ -98,7 +103,7 @@
 
         // Run the rendering loop until the user has attempted to close
         // the window or has pressed the ESCAPE key.
-        while ( !glfwWindowShouldClose(window) ) {
+        while (!glfwWindowShouldClose(window)) {
             glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT); // clear the framebuffer
 
             glfwSwapBuffers(window); // swap the color buffers
@@ -108,8 +113,4 @@
             glfwPollEvents();
         }
     }
-
-    public static void main(String[] args) {
-        new HelloWorld().run();
-    }
 }
\ No newline at end of file
